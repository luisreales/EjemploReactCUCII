{"version":3,"sources":["components/Header.jsx","components/Footer.js","components/Mensaje.js","components/Contador.js","components/ContadorHook.js","components/Producto.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","Footer","fecha","Mensaje","size","color","contenido","styles","fontSize","style","Contador","state","count","this","onClick","setState","Component","ContadorHook","useState","setCount","producto","nombre","precio","id","App","Date","getFullYear","productos","map","productoItem","Producto","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAiCeA,MA9Bf,YAA0B,IAATC,EAAQ,EAARA,OAqBb,OACI,yBAAKC,UAAU,UAGX,4BAAKD,KClBFE,EARA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACb,OACI,gCACI,iEAAyCA,KCWtCC,EAfC,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAErBC,EAAS,CACXF,MAAOA,EACPG,SAASJ,GAEb,OACI,6BACI,wBAAIK,MAAOF,GAASD,K,4BCUjBI,E,4MAhBXC,MAAQ,CAACC,MAAM,G,uDAEN,IAAD,OACGA,EAASC,KAAKF,MAAdC,MACP,OACI,6BACI,8CAAoBA,EAApB,UAEA,4BAAQE,QAAS,kBAAM,EAAKC,SAAS,CAACH,MAAOA,EAAQ,MAArD,mB,GATQI,aCCjB,SAASC,IAAc,MAOAC,mBAAS,GAPT,mBAOnBN,EAPmB,KAOZO,EAPY,KAS1B,OACI,6BACE,0DAAgCP,EAAhC,UAEA,4BAAQE,QAAS,kBAAMK,EAASP,EAAQ,KAAxC,2BCfV,IAceQ,EAdE,YAAiB,IAAfA,EAAc,EAAdA,SAERC,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,OAAcF,EAANG,GACvB,OACI,6BACI,4BAAKF,GACL,gCAAMC,KCmCHE,MAjCf,WACE,IAAMtB,GAAQ,IAAIuB,MAAOC,cADZ,EAGyBR,mBAAS,CAC7C,CAACK,GAAG,EAAEF,OAAO,gBAAgBC,OAAO,KACpC,CAACC,GAAG,EAAEF,OAAO,iBAAiBC,OAAO,KACrC,CAACC,GAAG,EAAEF,OAAO,kBAAkBC,OAAO,KACtC,CAACC,GAAG,EAAEF,OAAO,wBAAwBC,OAAO,OAPjC,mBAGNK,EAHM,KAUb,OAVa,KAWX,kBAAC,WAAD,KACK,kBAAC,EAAD,CAAQ5B,OAAO,8BACf,kBAAC,EAAD,CAASK,KAAK,OAAOC,MAAM,UAAUC,UAAU,UAC/C,kBAAC,EAAD,CAASF,KAAK,OAAOC,MAAM,UAAUC,UAAU,aAC/C,kBAAC,EAAD,CAASF,KAAK,OAAOC,MAAM,UAAUC,UAAU,iBAC/C,kBAAC,EAAD,MACA,kBAACW,EAAD,MAMCU,EAAUC,KAAI,SAAAC,GAAY,OACzB,kBAACC,EAAD,CAAUV,SAAUS,EAAcE,IAAKF,EAAaN,QAItD,kBAAC,EAAD,CAAQrB,MAAOA,MCzBJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01b072b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header({titulo}){\r\n    //basico JSX\r\n    // const edad = 17;\r\n    // const nombre = 'Luis';\r\n\r\n    // let mensaje = \"\";\r\n\r\n    // if(edad >= 18){\r\n    //     mensaje = \"eres mayor de edad\"\r\n    // }else{\r\n    //     mensaje = \"eres menor de edad\"\r\n    // }\r\n\r\n    //ver el contenido de los props\r\n    // console.log(props)\r\n\r\n\r\n\r\n    //antes del return se pueden declarar variables.\r\n    /*Todo lo que se coloca dnetro del return es lo que se va \r\n    a ver en pantalla*/\r\n    return(\r\n        <div className=\"header\">\r\n           {/* <h1 id=\"titulo\">Saludos desde Header</h1>\r\n            <h4>Hola {nombre}, tu edad es {edad} , entonces {mensaje}</h4> */}\r\n            <h1>{titulo}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = ({fecha}) => {\r\n    return ( \r\n        <footer>\r\n            <p>Todos los derechos reservados &copy; {fecha}</p>\r\n        </footer>\r\n     );\r\n}\r\n \r\nexport default Footer;","import React from 'react'\r\nconst Mensaje = ({size, color, contenido}) => {\r\n\r\n    const styles = {\r\n        color: color,\r\n        fontSize:size\r\n    }\r\n    return (\r\n        <div>\r\n            <h3 style={styles}>{contenido}</h3>\r\n        </div>\r\n        \r\n     \r\n      );\r\n}\r\n \r\nexport default Mensaje;","import React, { Component } from 'react';\r\n\r\nclass Contador  extends Component{\r\n    state = {count:0}; //inicializamos el state a 0\r\n\r\n    render(){\r\n        const {count} = this.state;\r\n        return (\r\n            <div>\r\n                <p>Has hecho click {count} veces</p>\r\n                {/* Actualizamos el state usando el metodo setState */}\r\n                <button onClick={() => this.setState({count: count + 1})}>\r\n                    Haz Click!\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contador;","\r\nimport React,{useState} from 'react';\r\n\r\nexport function ContadorHook(){\r\n    \r\n    // useState recibe un parámetro: el valor inicial del estado (que será 0)\r\n    // y devuelve un array de dos posiciones:\r\n    //  la primera (count), tiene el valor del estado\r\n    //  la segunda (setCount), el método para actualizar el estado\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n          <p>Has hecho click desde hooks {count} veces</p>\r\n          { /* actualizamos el state al hacer click con setCount */ }\r\n          <button onClick={() => setCount(count + 1)}>\r\n            Haz click desde hooks!\r\n          </button>\r\n        </div>\r\n      )\r\n}\r\n","import React from 'react';\r\nconst producto = ({producto}) => {\r\n\r\n    const {nombre, precio, id} = producto;\r\n    return (\r\n        <div>\r\n            <h2>{nombre}</h2>\r\n            <h2>${precio}</h2>            \r\n        </div>\r\n    \r\n        \r\n        \r\n    );\r\n}\r\n \r\nexport default producto;","import React , {Fragment,useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Mensaje from './components/Mensaje';\nimport Contador from './components/Contador';\nimport {ContadorHook} from './components/ContadorHook';\nimport Producto from './components/Producto';\n\nfunction App() {\n  const fecha = new Date().getFullYear();\n  //Crear listado de productos, un array de objetos\n  const [productos, guardarProductos] = useState([\n    {id:1,nombre:'Camisa Junior',precio:100},\n    {id:2,nombre:'Camisa America',precio:200},\n    {id:3,nombre:'Camisa Nacional',precio:300},\n    {id:4,nombre:'Camisa Real Cartagena',precio:500},\n  ])\n\n  return (\n    <Fragment>\n         <Header titulo='Tienda Virtual El Carmelo' /> \n         <Mensaje size='30px' color='#ff0000' contenido='AHORA' />\n         <Mensaje size='40px' color='#00ff00' contenido='ENTIENDO' />\n         <Mensaje size='60px' color='#0000ff' contenido='LOS PROPS :D' />\n         <Contador /> \n         <ContadorHook /> \n         {/* <Mensaje size='30px' color='#ff0000' contenido='AHORA' />\n         <Mensaje size='40px' color='#00ff00' contenido='ENTIENDO' />\n         <Mensaje size='60px' color='#0000ff' contenido='LOS PROPS :D' />\n         <Contador /> \n         <ContadorHook /> */}\n         {productos.map(productoItem => (\n           <Producto producto={productoItem} key={productoItem.id} />\n         ))}\n\n\n         <Footer fecha={fecha}/>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}